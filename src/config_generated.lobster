// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum ObjectKind:
    ObjectKind_okInvalid = 0
    ObjectKind_Player = 1
    ObjectKind_Sword = 2

enum TileName:
    TileName_None = -1
    TileName_Sword = 554

class ObjectSpec

class ConfigRoot

class ObjectSpec : flatbuffers_handle
    def kind():
        return ObjectKind(buf_.flatbuffers_field_int16(pos_, 4, 0))
    def short_name():
        return buf_.flatbuffers_field_string(pos_, 6)
    def static_tile():
        return TileName(buf_.flatbuffers_field_int32(pos_, 8, -1))
    def weight():
        return buf_.flatbuffers_field_float32(pos_, 10, 0.0)

def GetRootAsObjectSpec(buf:string): return ObjectSpec { buf, buf.flatbuffers_indirect(0) }

struct ObjectSpecBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(4)
        return this
    def add_kind(kind:ObjectKind):
        b_.PrependInt16Slot(0, kind, 0)
        return this
    def add_short_name(short_name:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, short_name)
        return this
    def add_static_tile(static_tile:TileName):
        b_.PrependInt32Slot(2, static_tile, -1)
        return this
    def add_weight(weight:float):
        b_.PrependFloat32Slot(3, weight, 0.0)
        return this
    def end():
        return b_.EndObject()

class ConfigRoot : flatbuffers_handle
    def objtypes(i:int):
        return ObjectSpec { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def objtypes_length():
        return buf_.flatbuffers_field_vector_len(pos_, 4)

def GetRootAsConfigRoot(buf:string): return ConfigRoot { buf, buf.flatbuffers_indirect(0) }

struct ConfigRootBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(1)
        return this
    def add_objtypes(objtypes:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, objtypes)
        return this
    def end():
        return b_.EndObject()

def ConfigRootStartObjtypesVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ConfigRootCreateObjtypesVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

