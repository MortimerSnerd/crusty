// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum GameStats:
    GameStats_Str = 0
    GameStats_Speed = 1
    GameStats_Will = 2
    GameStats_Wit = 3
    GameStats_Hp = 4
    GameStats_Melee = 5
    GameStats_Defence = 6
    GameStats_Dodge = 7

enum GenderSpec:
    GenderSpec_He = 0
    GenderSpec_She = 1
    GenderSpec_It = 2

enum ItemSlot:
    ItemSlot_None = 0
    ItemSlot_Melee = 1
    ItemSlot_Head = 2
    ItemSlot_Chest = 3
    ItemSlot_Feet = 4

enum StatTemplateName:
    StatTemplateName_NoStats = 0
    StatTemplateName_Human = 1
    StatTemplateName_Groundhog = 2
    StatTemplateName_COUNT = 3

enum DmgRange:
    DmgRange_Low2D6 = 0
    DmgRange_Hi2D6 = 1
    DmgRange_D6 = 2

enum DmgType:
    DmgType_Slashing = 0
    DmgType_Stabbing = 1
    DmgType_Impact = 2

enum ObjectKind:
    ObjectKind_Invalid = 0
    ObjectKind_Player = 1
    ObjectKind_Sword = 2
    ObjectKind_Groundhog = 3
    ObjectKind_Bullet = 4
    ObjectKind_Dresser = 5
    ObjectKind_FalseTeeth = 6
    ObjectKind_Cheese = 7

enum TileName:
    TileName_None = 0
    TileName_Sword = 1
    TileName_Fish = 2
    TileName_Groundhog = 3
    TileName_Dresser = 4
    TileName_DeadGroundhog = 5
    TileName_Bullet = 6
    TileName_Fishf = 7
    TileName_Groundhog1 = 8
    TileName_DeadGroundhog1 = 9
    TileName_DeadGroundhog2 = 10
    TileName_DresserOpen = 11
    TileName_FalseTeeth = 12
    TileName_Cheese = 13

enum ItemFlags:
    ItemFlags_Living = 1
    ItemFlags_BlocksLiving = 2
    ItemFlags_AnimTrail = 4
    ItemFlags_EmitsLight = 8
    ItemFlags_AbutsWall = 16
    ItemFlags_Immobile = 32
    ItemFlags_Container = 64

enum StateFlags:
    StateFlags_Open = 1
    StateFlags_Equipped = 2
    StateFlags_Dead = 4

enum AnimationKind:
    AnimationKind_OneShot = 0
    AnimationKind_Loop = 1

class StatPair

class StatTemplate

class DamageRange

class CfgSkillPair

class CfgSkillSynergy

class SfxSpec

class ObjectSounds

class WeaponStats

class ObjectSpec

class Frame

class SpriteAnim

class ConfigRoot

class StatPair : flatbuffers_handle
    def name():
        return GameStats(buf_.read_int8_le(pos_ + 0))
    def val():
        return buf_.read_int32_le(pos_ + 4)

def CreateStatPair(b_:flatbuffers_builder, name:GameStats, val:int):
    b_.Prep(4, 8)
    b_.PrependInt32(val)
    b_.Pad(3)
    b_.PrependUint8(name)
    return b_.Offset()

class StatTemplate : flatbuffers_handle
    def name():
        return StatTemplateName(buf_.flatbuffers_field_int16(pos_, 4, 0))
    def stats(i:int):
        return StatPair { buf_, buf_.flatbuffers_field_vector(pos_, 6) + i * 8 }
    def stats_length():
        return buf_.flatbuffers_field_vector_len(pos_, 6)

def GetRootAsStatTemplate(buf:string): return StatTemplate { buf, buf.flatbuffers_indirect(0) }

struct StatTemplateBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(2)
        return this
    def add_name(name:StatTemplateName):
        b_.PrependUint16Slot(0, name, 0)
        return this
    def add_stats(stats:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, stats)
        return this
    def end():
        return b_.EndObject()

def StatTemplateStartStatsVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(8, n_, 4)

class DamageRange : flatbuffers_handle
    def range():
        return DmgRange(buf_.read_int8_le(pos_ + 0))
    def plus():
        return buf_.read_int32_le(pos_ + 4)

def CreateDamageRange(b_:flatbuffers_builder, range:DmgRange, plus:int):
    b_.Prep(4, 8)
    b_.PrependInt32(plus)
    b_.Pad(3)
    b_.PrependUint8(range)
    return b_.Offset()

class CfgSkillPair : flatbuffers_handle
    def atk():
        return GameStats(buf_.read_int8_le(pos_ + 0))
    def defend():
        return GameStats(buf_.read_int8_le(pos_ + 1))

def CreateCfgSkillPair(b_:flatbuffers_builder, atk:GameStats, defend:GameStats):
    b_.Prep(1, 2)
    b_.PrependUint8(defend)
    b_.PrependUint8(atk)
    return b_.Offset()

class CfgSkillSynergy : flatbuffers_handle
    def skill():
        return GameStats(buf_.flatbuffers_field_int8(pos_, 4, 0))
    def modified_by():
        return GameStats(buf_.flatbuffers_field_int8(pos_, 6, 0))
    def plus():
        return buf_.flatbuffers_field_int32(pos_, 8, 0)
    def numerator():
        return buf_.flatbuffers_field_int32(pos_, 10, 1)
    def denominator():
        return buf_.flatbuffers_field_int32(pos_, 12, 1)

def GetRootAsCfgSkillSynergy(buf:string): return CfgSkillSynergy { buf, buf.flatbuffers_indirect(0) }

struct CfgSkillSynergyBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(5)
        return this
    def add_skill(skill:GameStats):
        b_.PrependUint8Slot(0, skill, 0)
        return this
    def add_modified_by(modified_by:GameStats):
        b_.PrependUint8Slot(1, modified_by, 0)
        return this
    def add_plus(plus:int):
        b_.PrependInt32Slot(2, plus, 0)
        return this
    def add_numerator(numerator:int):
        b_.PrependInt32Slot(3, numerator, 1)
        return this
    def add_denominator(denominator:int):
        b_.PrependInt32Slot(4, denominator, 1)
        return this
    def end():
        return b_.EndObject()

class SfxSpec : flatbuffers_handle
    def sfx():
        return buf_.flatbuffers_field_string(pos_, 4)
    def vol():
        return buf_.flatbuffers_field_float32(pos_, 6, 0.5)

def GetRootAsSfxSpec(buf:string): return SfxSpec { buf, buf.flatbuffers_indirect(0) }

struct SfxSpecBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(2)
        return this
    def add_sfx(sfx:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, sfx)
        return this
    def add_vol(vol:float):
        b_.PrependFloat32Slot(1, vol, 0.5)
        return this
    def end():
        return b_.EndObject()

class ObjectSounds : flatbuffers_handle
    def hurt(i:int):
        return SfxSpec { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def hurt_length():
        return buf_.flatbuffers_field_vector_len(pos_, 4)
    def death():
        let o = buf_.flatbuffers_field_table(pos_, 6)
        return if o: SfxSpec { buf_, o } else: nil
    def surprise():
        let o = buf_.flatbuffers_field_table(pos_, 8)
        return if o: SfxSpec { buf_, o } else: nil

def GetRootAsObjectSounds(buf:string): return ObjectSounds { buf, buf.flatbuffers_indirect(0) }

struct ObjectSoundsBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(3)
        return this
    def add_hurt(hurt:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, hurt)
        return this
    def add_death(death:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, death)
        return this
    def add_surprise(surprise:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, surprise)
        return this
    def end():
        return b_.EndObject()

def ObjectSoundsStartHurtVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ObjectSoundsCreateHurtVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class WeaponStats : flatbuffers_handle
    def speed():
        return buf_.flatbuffers_field_int32(pos_, 4, 0)
    def kind():
        return DmgType(buf_.flatbuffers_field_int8(pos_, 6, 0))
    def dmg():
        let o = buf_.flatbuffers_field_struct(pos_, 8)
        return if o: DamageRange { buf_, o } else: nil
    def miss_sound():
        return buf_.flatbuffers_field_string(pos_, 10)
    def hit_sound():
        return buf_.flatbuffers_field_string(pos_, 12)
    def skill():
        return GameStats(buf_.flatbuffers_field_int8(pos_, 14, 5))

def GetRootAsWeaponStats(buf:string): return WeaponStats { buf, buf.flatbuffers_indirect(0) }

struct WeaponStatsBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(6)
        return this
    def add_speed(speed:int):
        b_.PrependInt32Slot(0, speed, 0)
        return this
    def add_kind(kind:DmgType):
        b_.PrependUint8Slot(1, kind, 0)
        return this
    def add_dmg(dmg:flatbuffers_offset):
        b_.PrependStructSlot(2, dmg)
        return this
    def add_miss_sound(miss_sound:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, miss_sound)
        return this
    def add_hit_sound(hit_sound:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, hit_sound)
        return this
    def add_skill(skill:GameStats):
        b_.PrependUint8Slot(5, skill, 5)
        return this
    def end():
        return b_.EndObject()

class ObjectSpec : flatbuffers_handle
    def kind():
        return ObjectKind(buf_.flatbuffers_field_int16(pos_, 4, 0))
    def short_name():
        return buf_.flatbuffers_field_string(pos_, 6)
    def desc():
        return buf_.flatbuffers_field_string(pos_, 8)
    def static_tile():
        return TileName(buf_.flatbuffers_field_int32(pos_, 10, 0))
    def weight():
        return buf_.flatbuffers_field_float32(pos_, 12, 0.0)
    def flags():
        return ItemFlags(buf_.flatbuffers_field_int32(pos_, 14, 0))
    def right_rotation():
        return buf_.flatbuffers_field_float32(pos_, 16, 0.0)
    def light_radius():
        return buf_.flatbuffers_field_int32(pos_, 18, 0)
    def dir_offset():
        return buf_.flatbuffers_field_float32(pos_, 20, 0.0)
    def initial_state():
        return StateFlags(buf_.flatbuffers_field_int32(pos_, 22, 0))
    def stat_base():
        return StatTemplateName(buf_.flatbuffers_field_int16(pos_, 24, 0))
    def weapon_stats():
        let o = buf_.flatbuffers_field_table(pos_, 26)
        return if o: WeaponStats { buf_, o } else: nil
    def slot():
        return ItemSlot(buf_.flatbuffers_field_int8(pos_, 28, 0))
    def gender():
        return GenderSpec(buf_.flatbuffers_field_int8(pos_, 30, 2))
    def wield_offset_x():
        return buf_.flatbuffers_field_float32(pos_, 32, 0.5)
    def wield_offset_y():
        return buf_.flatbuffers_field_float32(pos_, 34, 0.75)
    def sounds():
        let o = buf_.flatbuffers_field_table(pos_, 36)
        return if o: ObjectSounds { buf_, o } else: nil

def GetRootAsObjectSpec(buf:string): return ObjectSpec { buf, buf.flatbuffers_indirect(0) }

struct ObjectSpecBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(17)
        return this
    def add_kind(kind:ObjectKind):
        b_.PrependInt16Slot(0, kind, 0)
        return this
    def add_short_name(short_name:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, short_name)
        return this
    def add_desc(desc:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, desc)
        return this
    def add_static_tile(static_tile:TileName):
        b_.PrependInt32Slot(3, static_tile, 0)
        return this
    def add_weight(weight:float):
        b_.PrependFloat32Slot(4, weight, 0.0)
        return this
    def add_flags(flags:ItemFlags):
        b_.PrependUint32Slot(5, flags, 0)
        return this
    def add_right_rotation(right_rotation:float):
        b_.PrependFloat32Slot(6, right_rotation, 0.0)
        return this
    def add_light_radius(light_radius:int):
        b_.PrependInt32Slot(7, light_radius, 0)
        return this
    def add_dir_offset(dir_offset:float):
        b_.PrependFloat32Slot(8, dir_offset, 0.0)
        return this
    def add_initial_state(initial_state:StateFlags):
        b_.PrependUint32Slot(9, initial_state, 0)
        return this
    def add_stat_base(stat_base:StatTemplateName):
        b_.PrependUint16Slot(10, stat_base, 0)
        return this
    def add_weapon_stats(weapon_stats:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(11, weapon_stats)
        return this
    def add_slot(slot:ItemSlot):
        b_.PrependUint8Slot(12, slot, 0)
        return this
    def add_gender(gender:GenderSpec):
        b_.PrependUint8Slot(13, gender, 2)
        return this
    def add_wield_offset_x(wield_offset_x:float):
        b_.PrependFloat32Slot(14, wield_offset_x, 0.5)
        return this
    def add_wield_offset_y(wield_offset_y:float):
        b_.PrependFloat32Slot(15, wield_offset_y, 0.75)
        return this
    def add_sounds(sounds:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(16, sounds)
        return this
    def end():
        return b_.EndObject()

class Frame : flatbuffers_handle
    def frame():
        return TileName(buf_.flatbuffers_field_int32(pos_, 4, 0))
    def duration():
        return buf_.flatbuffers_field_float32(pos_, 6, 0.0)

def GetRootAsFrame(buf:string): return Frame { buf, buf.flatbuffers_indirect(0) }

struct FrameBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(2)
        return this
    def add_frame(frame:TileName):
        b_.PrependInt32Slot(0, frame, 0)
        return this
    def add_duration(duration:float):
        b_.PrependFloat32Slot(1, duration, 0.0)
        return this
    def end():
        return b_.EndObject()

class SpriteAnim : flatbuffers_handle
    def name():
        return buf_.flatbuffers_field_string(pos_, 4)
    def kind():
        return AnimationKind(buf_.flatbuffers_field_int8(pos_, 6, 1))
    def frames(i:int):
        return Frame { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 8) + i * 4) }
    def frames_length():
        return buf_.flatbuffers_field_vector_len(pos_, 8)

def GetRootAsSpriteAnim(buf:string): return SpriteAnim { buf, buf.flatbuffers_indirect(0) }

struct SpriteAnimBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(3)
        return this
    def add_name(name:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, name)
        return this
    def add_kind(kind:AnimationKind):
        b_.PrependUint8Slot(1, kind, 1)
        return this
    def add_frames(frames:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, frames)
        return this
    def end():
        return b_.EndObject()

def SpriteAnimStartFramesVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def SpriteAnimCreateFramesVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class ConfigRoot : flatbuffers_handle
    def objtypes(i:int):
        return ObjectSpec { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def objtypes_length():
        return buf_.flatbuffers_field_vector_len(pos_, 4)
    def animations(i:int):
        return SpriteAnim { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 6) + i * 4) }
    def animations_length():
        return buf_.flatbuffers_field_vector_len(pos_, 6)
    def stat_templates(i:int):
        return StatTemplate { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 8) + i * 4) }
    def stat_templates_length():
        return buf_.flatbuffers_field_vector_len(pos_, 8)
    def opposing(i:int):
        return CfgSkillPair { buf_, buf_.flatbuffers_field_vector(pos_, 10) + i * 2 }
    def opposing_length():
        return buf_.flatbuffers_field_vector_len(pos_, 10)
    def synergies(i:int):
        return CfgSkillSynergy { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 12) + i * 4) }
    def synergies_length():
        return buf_.flatbuffers_field_vector_len(pos_, 12)

def GetRootAsConfigRoot(buf:string): return ConfigRoot { buf, buf.flatbuffers_indirect(0) }

struct ConfigRootBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(5)
        return this
    def add_objtypes(objtypes:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, objtypes)
        return this
    def add_animations(animations:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, animations)
        return this
    def add_stat_templates(stat_templates:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, stat_templates)
        return this
    def add_opposing(opposing:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, opposing)
        return this
    def add_synergies(synergies:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, synergies)
        return this
    def end():
        return b_.EndObject()

def ConfigRootStartObjtypesVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ConfigRootCreateObjtypesVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ConfigRootStartAnimationsVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ConfigRootCreateAnimationsVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ConfigRootStartStatTemplatesVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ConfigRootCreateStatTemplatesVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ConfigRootStartOpposingVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(2, n_, 1)

def ConfigRootStartSynergiesVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ConfigRootCreateSynergiesVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

