// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum LivingStats:
    LivingStats_Str = 0
    LivingStats_Ag = 1
    LivingStats_Dex = 2
    LivingStats_Will = 3
    LivingStats_Wit = 4
    LivingStats_Per = 5
    LivingStats_NumStats = 6

enum StatTemplateName:
    StatTemplateName_NoStats = 0
    StatTemplateName_Human = 1
    StatTemplateName_Groundhog = 2

enum ObjectKind:
    ObjectKind_Invalid = 0
    ObjectKind_Player = 1
    ObjectKind_Sword = 2
    ObjectKind_Groundhog = 3
    ObjectKind_Bullet = 4
    ObjectKind_Dresser = 5
    ObjectKind_FalseTeeth = 6
    ObjectKind_Cheese = 7

enum TileName:
    TileName_None = 0
    TileName_Sword = 1
    TileName_Fish = 2
    TileName_Groundhog = 3
    TileName_Dresser = 4
    TileName_DeadGroundhog = 5
    TileName_Bullet = 6
    TileName_Fishf = 7
    TileName_Groundhog1 = 8
    TileName_DeadGroundhog1 = 9
    TileName_DeadGroundhog2 = 10
    TileName_DresserOpen = 11
    TileName_FalseTeeth = 12
    TileName_Cheese = 13

enum ItemFlags:
    ItemFlags_Living = 1
    ItemFlags_BlocksLiving = 2
    ItemFlags_AnimTrail = 4
    ItemFlags_EmitsLight = 8
    ItemFlags_AbutsWall = 16
    ItemFlags_Immobile = 32
    ItemFlags_Container = 64

enum StateFlags:
    StateFlags_Open = 1

enum AnimationKind:
    AnimationKind_OneShot = 0
    AnimationKind_Loop = 1

class StatRange

class StatTemplate

class ObjectSpec

class Frame

class SpriteAnim

class ConfigRoot

class StatRange : flatbuffers_handle
    def lo():
        return buf_.read_float32_le(pos_ + 0)
    def hi():
        return buf_.read_float32_le(pos_ + 4)

def CreateStatRange(b_:flatbuffers_builder, lo:float, hi:float):
    b_.Prep(4, 8)
    b_.PrependFloat32(hi)
    b_.PrependFloat32(lo)
    return b_.Offset()

class StatTemplate : flatbuffers_handle
    def name():
        return StatTemplateName(buf_.flatbuffers_field_int16(pos_, 4, 0))
    def str():
        let o = buf_.flatbuffers_field_struct(pos_, 6)
        return if o: StatRange { buf_, o } else: nil
    def ag():
        let o = buf_.flatbuffers_field_struct(pos_, 8)
        return if o: StatRange { buf_, o } else: nil
    def dex():
        let o = buf_.flatbuffers_field_struct(pos_, 10)
        return if o: StatRange { buf_, o } else: nil
    def will():
        let o = buf_.flatbuffers_field_struct(pos_, 12)
        return if o: StatRange { buf_, o } else: nil
    def wit():
        let o = buf_.flatbuffers_field_struct(pos_, 14)
        return if o: StatRange { buf_, o } else: nil
    def per():
        let o = buf_.flatbuffers_field_struct(pos_, 16)
        return if o: StatRange { buf_, o } else: nil

def GetRootAsStatTemplate(buf:string): return StatTemplate { buf, buf.flatbuffers_indirect(0) }

struct StatTemplateBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(7)
        return this
    def add_name(name:StatTemplateName):
        b_.PrependUint16Slot(0, name, 0)
        return this
    def add_str(str:flatbuffers_offset):
        b_.PrependStructSlot(1, str)
        return this
    def add_ag(ag:flatbuffers_offset):
        b_.PrependStructSlot(2, ag)
        return this
    def add_dex(dex:flatbuffers_offset):
        b_.PrependStructSlot(3, dex)
        return this
    def add_will(will:flatbuffers_offset):
        b_.PrependStructSlot(4, will)
        return this
    def add_wit(wit:flatbuffers_offset):
        b_.PrependStructSlot(5, wit)
        return this
    def add_per(per:flatbuffers_offset):
        b_.PrependStructSlot(6, per)
        return this
    def end():
        return b_.EndObject()

class ObjectSpec : flatbuffers_handle
    def kind():
        return ObjectKind(buf_.flatbuffers_field_int16(pos_, 4, 0))
    def short_name():
        return buf_.flatbuffers_field_string(pos_, 6)
    def static_tile():
        return TileName(buf_.flatbuffers_field_int32(pos_, 8, 0))
    def weight():
        return buf_.flatbuffers_field_float32(pos_, 10, 0.0)
    def flags():
        return ItemFlags(buf_.flatbuffers_field_int32(pos_, 12, 0))
    def right_rotation():
        return buf_.flatbuffers_field_float32(pos_, 14, 0.0)
    def light_radius():
        return buf_.flatbuffers_field_int32(pos_, 16, 0)
    def dir_offset():
        return buf_.flatbuffers_field_float32(pos_, 18, 0.0)
    def initial_state():
        return StateFlags(buf_.flatbuffers_field_int32(pos_, 20, 0))
    def stat_base():
        return StatTemplateName(buf_.flatbuffers_field_int16(pos_, 22, 0))

def GetRootAsObjectSpec(buf:string): return ObjectSpec { buf, buf.flatbuffers_indirect(0) }

struct ObjectSpecBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(10)
        return this
    def add_kind(kind:ObjectKind):
        b_.PrependInt16Slot(0, kind, 0)
        return this
    def add_short_name(short_name:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, short_name)
        return this
    def add_static_tile(static_tile:TileName):
        b_.PrependInt32Slot(2, static_tile, 0)
        return this
    def add_weight(weight:float):
        b_.PrependFloat32Slot(3, weight, 0.0)
        return this
    def add_flags(flags:ItemFlags):
        b_.PrependUint32Slot(4, flags, 0)
        return this
    def add_right_rotation(right_rotation:float):
        b_.PrependFloat32Slot(5, right_rotation, 0.0)
        return this
    def add_light_radius(light_radius:int):
        b_.PrependInt32Slot(6, light_radius, 0)
        return this
    def add_dir_offset(dir_offset:float):
        b_.PrependFloat32Slot(7, dir_offset, 0.0)
        return this
    def add_initial_state(initial_state:StateFlags):
        b_.PrependUint32Slot(8, initial_state, 0)
        return this
    def add_stat_base(stat_base:StatTemplateName):
        b_.PrependUint16Slot(9, stat_base, 0)
        return this
    def end():
        return b_.EndObject()

class Frame : flatbuffers_handle
    def frame():
        return TileName(buf_.flatbuffers_field_int32(pos_, 4, 0))
    def duration():
        return buf_.flatbuffers_field_float32(pos_, 6, 0.0)

def GetRootAsFrame(buf:string): return Frame { buf, buf.flatbuffers_indirect(0) }

struct FrameBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(2)
        return this
    def add_frame(frame:TileName):
        b_.PrependInt32Slot(0, frame, 0)
        return this
    def add_duration(duration:float):
        b_.PrependFloat32Slot(1, duration, 0.0)
        return this
    def end():
        return b_.EndObject()

class SpriteAnim : flatbuffers_handle
    def name():
        return buf_.flatbuffers_field_string(pos_, 4)
    def kind():
        return AnimationKind(buf_.flatbuffers_field_int8(pos_, 6, 1))
    def frames(i:int):
        return Frame { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 8) + i * 4) }
    def frames_length():
        return buf_.flatbuffers_field_vector_len(pos_, 8)

def GetRootAsSpriteAnim(buf:string): return SpriteAnim { buf, buf.flatbuffers_indirect(0) }

struct SpriteAnimBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(3)
        return this
    def add_name(name:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, name)
        return this
    def add_kind(kind:AnimationKind):
        b_.PrependUint8Slot(1, kind, 1)
        return this
    def add_frames(frames:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, frames)
        return this
    def end():
        return b_.EndObject()

def SpriteAnimStartFramesVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def SpriteAnimCreateFramesVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

class ConfigRoot : flatbuffers_handle
    def objtypes(i:int):
        return ObjectSpec { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 4) + i * 4) }
    def objtypes_length():
        return buf_.flatbuffers_field_vector_len(pos_, 4)
    def animations(i:int):
        return SpriteAnim { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 6) + i * 4) }
    def animations_length():
        return buf_.flatbuffers_field_vector_len(pos_, 6)
    def stat_templates(i:int):
        return StatTemplate { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 8) + i * 4) }
    def stat_templates_length():
        return buf_.flatbuffers_field_vector_len(pos_, 8)

def GetRootAsConfigRoot(buf:string): return ConfigRoot { buf, buf.flatbuffers_indirect(0) }

struct ConfigRootBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(3)
        return this
    def add_objtypes(objtypes:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, objtypes)
        return this
    def add_animations(animations:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, animations)
        return this
    def add_stat_templates(stat_templates:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, stat_templates)
        return this
    def end():
        return b_.EndObject()

def ConfigRootStartObjtypesVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ConfigRootCreateObjtypesVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ConfigRootStartAnimationsVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ConfigRootCreateAnimationsVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ConfigRootStartStatTemplatesVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def ConfigRootCreateStatTemplatesVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

