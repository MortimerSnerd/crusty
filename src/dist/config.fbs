enum GameStats : uint8
{
   Str, Speed, Will, Wit,

   // Calculated attributes.
   Hp, 

   // Skills
   Melee, Defence, Dodge
}

// Hints for module that puts together log messages.
enum GenderSpec : uint8 {
    He, She, It
}

// Where an item can be held or is held, depending on context.
enum ItemSlot : uint8 {
    None,
    Melee, 
    Head, 
    Chest, 
    Feet 
}

// Base stats that can be referenced by a living object.
enum StatTemplateName : uint16 {
    NoStats, Human, Groundhog, 

    COUNT  // Used to size arrays indexed by this enum.
}

struct StatPair {
    name: GameStats;
    val: int;
}

table StatTemplate {
    name: StatTemplateName; 
    stats: [StatPair];
}

enum DmgRange : uint8 {
   Low2D6,        // Mean towards 3 with occasional high excursions.
   Hi2D6,         // Opposite of Low2D6
   D6             // Flat damage range.
}    

// Support limited damage roll types so we can 
// print them prettily, and not have the code vary
// from the documentation without the work of keeping
// them in a more complicated expression form that can 
// be executed.
struct DamageRange {
   range: DmgRange;
   plus: int = 0;
}

struct CfgSkillPair {
    atk: GameStats;
    defend: GameStats;
}

// Bonuses or maluses can be applied to skills
// based on the value of other stats/skills.
// Value comes out as (skill_val + plus)*numerator/denominator
table CfgSkillSynergy {
    skill: GameStats;
    modified_by: GameStats;
    plus: int = 0;
    numerator: int = 1;
    denominator: int = 1;
}

enum DmgType : uint8 {
    Slashing, Stabbing, Impact
}

table WeaponStats {
    speed: int;
    kind: DmgType;
    dmg: DamageRange;
    miss_sound: string;
    hit_sound: string;
    skill: GameStats = Melee;
}

enum ObjectKind:short { Invalid = 0, 
  Player, 
  Sword,
  Groundhog, 
  Bullet, 
  Dresser, 
  FalseTeeth, 
  Cheese
}

enum TileName:int32 {
  None = 0,
  Sword = 1,
  Fish = 2,
  Groundhog = 3,
  Dresser = 4,
  DeadGroundhog = 5, 
  Bullet = 6, 
  Fishf = 7, 
  Groundhog1 = 8, 
  DeadGroundhog1 = 9,
  DeadGroundhog2 = 10,
  DresserOpen = 11, 
  FalseTeeth = 12, 
  Cheese = 13
}

enum ItemFlags : uint32 (bit_flags)
{
    Living,
    BlocksLiving,
    AnimTrail,
    EmitsLight, 
    AbutsWall,
    Immobile, 
    Container
}

enum StateFlags : uint32 (bit_flags)
{
    Open, 
    Equipped
}

table ObjectSpec {
   kind: ObjectKind;
   short_name: string;
   static_tile: TileName = None;
   weight: float;
   flags: ItemFlags;
   right_rotation: float = 0;
   light_radius: int = 0;
   dir_offset: float = 0.0;  // For AbutsWall, amount of offset in the direction the object is facing. 1 == 1 grid.
   initial_state: StateFlags = 0;
   stat_base: StatTemplateName = NoStats;
   weapon_stats: WeaponStats;
   // Where the item can be equipped.
   slot: ItemSlot = None;   
   gender: GenderSpec = It;
   wield_offset_x: float = 0.5;
   wield_offset_y: float = 0.75;
} 

enum AnimationKind : uint8
{
    OneShot, 
    Loop
}

table Frame {
    frame:  TileName;
    duration: float;
}

table SpriteAnim {
   name: string;
   kind: AnimationKind = Loop;
   frames: [Frame];
}

table ConfigRoot {
   objtypes: [ObjectSpec];
   animations: [SpriteAnim];
   stat_templates: [StatTemplate];
   opposing: [CfgSkillPair];   // Map skills that oppose other skills.
   synergies: [CfgSkillSynergy];
}
    
root_type ConfigRoot;

