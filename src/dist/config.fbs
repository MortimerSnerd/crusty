enum LivingStats : uint8
{
   Str, Ag, Dex, Will, Wit, Per, NumStats
}

struct StatRange {
    lo: float; 
    hi: float;
}

// Base stats that can be referenced by a living object.
enum StatTemplateName : uint16 {
    NoStats, Human, Groundhog
}

table StatTemplate {
    name: StatTemplateName; 
    str: StatRange;   // Physical strength
    ag: StatRange;    // Physical speed. 
    dex: StatRange;   // Physical precision
    will: StatRange;  // Mental strength
    wit: StatRange;   // Mental speed 
    per: StatRange;   // Perception, mental precision? 
}

enum ObjectKind:short { Invalid = 0, 
  Player, 
  Sword,
  Groundhog, 
  Bullet, 
  Dresser, 
  FalseTeeth, 
  Cheese
}

enum TileName:int32 {
  None = 0,
  Sword = 1,
  Fish = 2,
  Groundhog = 3,
  Dresser = 4,
  DeadGroundhog = 5, 
  Bullet = 6, 
  Fishf = 7, 
  Groundhog1 = 8, 
  DeadGroundhog1 = 9,
  DeadGroundhog2 = 10,
  DresserOpen = 11, 
  FalseTeeth = 12, 
  Cheese = 13
}

enum ItemFlags : uint32 (bit_flags)
{
    Living,
    BlocksLiving,
    AnimTrail,
    EmitsLight, 
    AbutsWall,
    Immobile, 
    Container
}

enum StateFlags : uint32 (bit_flags)
{
    Open
}

table ObjectSpec {
   kind: ObjectKind;
   short_name: string;
   static_tile: TileName = None;
   weight: float;
   flags: ItemFlags;
   right_rotation: float = 0;
   light_radius: int = 0;
   dir_offset: float = 0.0;  // For AbutsWall, amount of offset in the direction the object is facing. 1 == 1 grid.
   initial_state: StateFlags = 0;
   stat_base: StatTemplateName = NoStats;
} 

enum AnimationKind : uint8
{
    OneShot, 
    Loop
}

table Frame {
    frame:  TileName;
    duration: float;
}

table SpriteAnim {
   name: string;
   kind: AnimationKind = Loop;
   frames: [Frame];
}

table ConfigRoot {
   objtypes: [ObjectSpec];
   animations: [SpriteAnim];
   stat_templates: [StatTemplate];
}
    
root_type ConfigRoot;

