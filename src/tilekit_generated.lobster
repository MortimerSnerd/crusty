// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class Animation

class Tag

class Map

class Object

class MapRoot

class Animation : flatbuffers_handle

def GetRootAsAnimation(buf:string): return Animation { buf, buf.flatbuffers_indirect(0) }

struct AnimationBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(0)
        return this
    def end():
        return b_.EndObject()

class Tag : flatbuffers_handle
    def label():
        return buf_.flatbuffers_field_string(pos_, 4)
    def tiles(i:int):
        return buf_.read_int32_le(buf_.flatbuffers_field_vector(pos_, 6) + i * 4)
    def tiles_length():
        return buf_.flatbuffers_field_vector_len(pos_, 6)

def GetRootAsTag(buf:string): return Tag { buf, buf.flatbuffers_indirect(0) }

struct TagBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(2)
        return this
    def add_label(label:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, label)
        return this
    def add_tiles(tiles:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, tiles)
        return this
    def end():
        return b_.EndObject()

def TagStartTilesVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def TagCreateTilesVector(b_:flatbuffers_builder, v_:[int]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependInt32(e_)
    return b_.EndVector(v_.length)

class Map : flatbuffers_handle
    def tile_w():
        return buf_.flatbuffers_field_int32(pos_, 4, 0)
    def tile_h():
        return buf_.flatbuffers_field_int32(pos_, 6, 0)
    def tile_spacing():
        return buf_.flatbuffers_field_int32(pos_, 8, 0)
    def image_filename():
        return buf_.flatbuffers_field_string(pos_, 10)
    def animations(i:int):
        return Animation { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 12) + i * 4) }
    def animations_length():
        return buf_.flatbuffers_field_vector_len(pos_, 12)
    def tags(i:int):
        return Tag { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 14) + i * 4) }
    def tags_length():
        return buf_.flatbuffers_field_vector_len(pos_, 14)
    def w():
        return buf_.flatbuffers_field_int32(pos_, 16, 0)
    def h():
        return buf_.flatbuffers_field_int32(pos_, 18, 0)
    def data(i:int):
        return buf_.read_int32_le(buf_.flatbuffers_field_vector(pos_, 20) + i * 4)
    def data_length():
        return buf_.flatbuffers_field_vector_len(pos_, 20)

def GetRootAsMap(buf:string): return Map { buf, buf.flatbuffers_indirect(0) }

struct MapBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(9)
        return this
    def add_tile_w(tile_w:int):
        b_.PrependInt32Slot(0, tile_w, 0)
        return this
    def add_tile_h(tile_h:int):
        b_.PrependInt32Slot(1, tile_h, 0)
        return this
    def add_tile_spacing(tile_spacing:int):
        b_.PrependInt32Slot(2, tile_spacing, 0)
        return this
    def add_image_filename(image_filename:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, image_filename)
        return this
    def add_animations(animations:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, animations)
        return this
    def add_tags(tags:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, tags)
        return this
    def add_w(w:int):
        b_.PrependInt32Slot(6, w, 0)
        return this
    def add_h(h:int):
        b_.PrependInt32Slot(7, h, 0)
        return this
    def add_data(data:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(8, data)
        return this
    def end():
        return b_.EndObject()

def MapStartAnimationsVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def MapCreateAnimationsVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MapStartTagsVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def MapCreateTagsVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MapStartDataVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def MapCreateDataVector(b_:flatbuffers_builder, v_:[int]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependInt32(e_)
    return b_.EndVector(v_.length)

class Object : flatbuffers_handle
    def name():
        return buf_.flatbuffers_field_string(pos_, 4)
    def id():
        return buf_.flatbuffers_field_string(pos_, 6)
    def x():
        return buf_.flatbuffers_field_string(pos_, 8)
    def y():
        return buf_.flatbuffers_field_string(pos_, 10)
    def w():
        return buf_.flatbuffers_field_string(pos_, 12)
    def h():
        return buf_.flatbuffers_field_string(pos_, 14)
    def orientation():
        return buf_.flatbuffers_field_string(pos_, 16)

def GetRootAsObject(buf:string): return Object { buf, buf.flatbuffers_indirect(0) }

struct ObjectBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(7)
        return this
    def add_name(name:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, name)
        return this
    def add_id(id:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, id)
        return this
    def add_x(x:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(2, x)
        return this
    def add_y(y:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(3, y)
        return this
    def add_w(w:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(4, w)
        return this
    def add_h(h:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(5, h)
        return this
    def add_orientation(orientation:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(6, orientation)
        return this
    def end():
        return b_.EndObject()

class MapRoot : flatbuffers_handle
    def map():
        let o = buf_.flatbuffers_field_table(pos_, 4)
        return if o: Map { buf_, o } else: nil
    def objects(i:int):
        return Object { buf_, buf_.flatbuffers_indirect(buf_.flatbuffers_field_vector(pos_, 6) + i * 4) }
    def objects_length():
        return buf_.flatbuffers_field_vector_len(pos_, 6)

def GetRootAsMapRoot(buf:string): return MapRoot { buf, buf.flatbuffers_indirect(0) }

struct MapRootBuilder:
    b_:flatbuffers_builder
    def start():
        b_.StartObject(2)
        return this
    def add_map(map:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(0, map)
        return this
    def add_objects(objects:flatbuffers_offset):
        b_.PrependUOffsetTRelativeSlot(1, objects)
        return this
    def end():
        return b_.EndObject()

def MapRootStartObjectsVector(b_:flatbuffers_builder, n_:int):
    b_.StartVector(4, n_, 4)
def MapRootCreateObjectsVector(b_:flatbuffers_builder, v_:[flatbuffers_offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

